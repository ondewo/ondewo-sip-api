// Copyright 2021 ONDEWO GmbH
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package ondewo.sip;
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

service Sip {
    // SIP LifeCyle explalined at https://thanhloi2603.wordpress.com/2017/06/10/sip-lifecycle-overview/

    // Starts a new SIP session for an account registered at a SIP server. <pre>RegisterAccount</pre> need to be called before.
    rpc StartSession (StartSessionRequest) returns (SipStatus) {};

    // Ends a SIP session for an account registered at a SIP server
    rpc EndSession (google.protobuf.Empty) returns (SipStatus) {};

    // Starts a call in an active SIP session for an account registered at a SIP server
    rpc StartCall (StartCallRequest) returns (SipStatus) {};
    
    // Ends a call in an active SIP session for an account registered at a SIP server
    rpc EndCall (EndCallRequest) returns (SipStatus) {};
    
    // Transfers a call in an active SIP session for an account registered at a SIP server to 
    // another SIP account or phone number specified by <pre>tranfer_id</pre>
    rpc TransferCall (TransferCallRequest) returns (SipStatus) {};

    // Registers s SIP account at a SIP server
    rpc RegisterAccount (RegisterAccountRequest) returns (SipStatus) {};

    // Gets the current SIP status
    rpc GetSipStatus (google.protobuf.Empty) returns (SipStatus) {};
    
    // Gets the history of SIP status
    rpc GetSipStatusHistory (google.protobuf.Empty) returns (SipStatusHistoryResponse) {};
    
    // Plays wav files during an ongoing call of an active SIP session
    rpc PlayWavFiles (PlayWavFilesRequest) returns (SipMicrophoneResponse) {};

    // Mutes the microphone in an ongoing call of an active SIP session
    rpc Mute (google.protobuf.Empty) returns (SipMicrophoneResponse) {};

    // Unmutes the microphone in an ongoing call of an active SIP session
    rpc UnMute (google.protobuf.Empty) returns (SipMicrophoneResponse) {};
}

// Ends an ongoing call of the active SIP session of the active SIP account
message EndCallRequest{

    // Set to <pre>True</pre> to forcefully hang up the call
    bool hard_hangup = 1;
}

// Request to start the call with the active SIP session of the active SIP account
message StartCallRequest{

    // SIP account name
    string callee_id = 1;

    // Headers to include when starting the call
    map<string,string> headers = 2;
}

message RegisterAccountRequest{
    // Account name of the sip user. Usually something like <pre>sip-user-1@mydomain.com</pre> or 
    // <pre>sip-user-1@192.168.123.123</pre> which uses the default SIP port <pre>5060</pre>.
    // Also a non-default SIP port can be specified via <pre>sip-user-1@mydomain.com:5099</pre> to connect
    // to a SIP server running on port <pre>5099</pre> 
    string account_name = 1;

    // Password of the account 
    string password = 2;

    // Optional: authentication user name
    string auth_username = 3;

    // Optional: outbound proxy address, e.g. <pre>myoutboundproxy.com</pre>
    string outbound_proxy = 3;
}

// Request for starting a new SIP session for a specified account
message StartSessionRequest{
    // Account name of the sip user. Usually something like <pre>sip-user-1@mydomain.com</pre> or 
    // <pre>sip-user-1@192.168.123.123</pre> which uses the default SIP port <pre>5060</pre>.
    // Also a non-default SIP port can be specified via <pre>sip-user-1@mydomain.com:5099</pre> to connect
    // to a SIP server running on port <pre>5099</pre> 
    string account_name = 1;

    // answer interval
    int32 auto_answer_interval = 2;
}

// Request for tranfering a call with or without headers
message TransferCallRequest{
    // The account name or phone number to transfer the call to
    string transfer_id = 1;

    // The headers to include when transfering the call 
    map<string,string> headers = 2;
}

// Microphone respone
message SipMicrophoneResponse{
    // Account name of the sip user. Usually something like <pre>sip-user-1@mydomain.com</pre> or 
    // <pre>sip-user-1@192.168.123.123</pre> which uses the default SIP port <pre>5060</pre>.
    // Also a non-default SIP port can be specified via <pre>sip-user-1@mydomain.com:5099</pre> to connect
    // to a SIP server running on port <pre>5099</pre> 
    string account_name=1;

    // Timestamp of the status
    google.protobuf.Timestamp timestamp = 2;
    
    // Microphone status
    enum SipMicrophoneType{

        // Microphone is muted
        SIP_MICROPHONE_MUTED = 1;

        // Microphone is unmuted
        SIP_MICROPHONE_UNMUTED = 2;
        
        // Microphone has played wav files
        SIP_MICROPHONE_WAV_FILES_PLAYED = 3;
    }
}

message SipStatus{
    // Account name of the sip user. Usually something like <pre>sip-user-1@mydomain.com</pre> or 
    // <pre>sip-user-1@192.168.123.123</pre> which uses the default SIP port <pre>5060</pre>.
    // Also a non-default SIP port can be specified via <pre>sip-user-1@mydomain.com:5099</pre> to connect
    // to a SIP server running on port <pre>5099</pre> 
    string account_name=1;

    // Timestamp of the status
    google.protobuf.Timestamp timestamp = 2;

    // Types of status
    enum StatusType{

        // No session is currently active
        NO_SESSION = 0;
        
        // SIP account is registered at a SIP server
        REGISTERED = 1;

        // SIP account is ready to call
        READY = 2;

        // SIP account is being called, i.e. inbound/incoming call
        INCOMING_CALL_INITIATED = 3;

        // SIP account starts calling, i.e. outbound/outgoing call
        OUTGOING_CALL_INITIATED = 4;

        // SIP account outbound call is connected
        OUTGOING_CALL_CONNECTED = 5;
        
        // SIP account incoming call is conneted
        INCOMING_CALL_CONNECTED = 6;

        // SIP account starts transfering the call
        TRANSFER_CALL_INITIATED = 7;

        // SIP account hangs up the ongoing call
        SOFT_HANGUP_INITIATED = 8;

        // SIP account forcefully hangs up by terminating the SIP program
        HARD_HANGUP_INITIATED = 9;
        
        // SIP account cannot accept the incoming call
        INCOMING_CALL_FAILED = 10;

        // SIP account cannot do an outbound call
        OUTGOING_CALL_FAILED = 11;

        // SIP account finished the ongoing incoming call
        INCOMING_CALL_FINISHED = 12;

        // SIP account finished the ongoing outgoing call
        OUTGOING_CALL_FINISHED = 13;

        // Registration of SIP account to SIP server failed
        SESSION_REGISTRATION_FAILED = 14;

        // SIP account started a new SIP session via a SIP server  
        SESSION_STARTED = 15;

        // SIP account ended active sip session with SIP server
        SESSION_ENDED = 16;
    }

    // Status type
    StatusType status_type = 3;
    
    // SIP account name
    string callee_id = 4;

    // SIP account of the transfer
    string transfer_call_id = 5;

    // Headers to include when calling outbound or transfer
    map<string,string> headers = 6;

}

// History of SIP status
message SipStatusHistoryResponse{

    // History of SIP status
    repeated SipStatus status_history = 1;
}

// Plays a list of wav files
message PlayWavFilesRequest{

    // Wav files as bytes in a list that will be played
    repeated bytes wav_files = 1;
}
